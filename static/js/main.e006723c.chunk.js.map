{"version":3,"sources":["api/builtins.js","utils/speak.js","utils/debounce.js","screens/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","phrases","speak","phrase","msg","SpeechSynthesisUtterance","window","speechSynthesis","debounce","func","wait","timeout","args","later","clearTimeout","setTimeout","Home","debouncedSpeak","className","map","group","onClick","e","preventDefault","onContextMenu","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAQAA,EAAOC,QAAU,CACfC,QATc,CACd,CAAC,OAAQ,OAAQ,UAAW,QAAS,QAAS,UAAW,UACzD,CAAC,QAAS,UAAW,SAAU,UAAW,aAAc,WAAY,QACpE,CAAC,YAAa,QAAS,UAAW,OAAQ,UAAW,QAAS,SAC9D,CAAC,UAAW,OAAQ,QAAS,eAAgB,UAAW,gBAAiB,WACzE,CAAC,MAAO,YAAa,iBAAkB,YAAa,eAAgB,gBAAiB,sB,6LCAxEC,MALf,SAAeC,GACb,IAAIC,EAAM,IAAIC,yBAAyBF,GACvCG,OAAOC,gBAAgBL,MAAME,ICYhBI,EAdE,SAACC,EAAMC,GACtB,IAAIC,EAEJ,OAAO,WAAoC,IAAD,uBAANC,EAAM,yBAANA,EAAM,gBACxC,IAAMC,EAAQ,WACZF,EAAU,KACVF,EAAI,WAAJ,EAAQG,IAGVE,aAAaH,GACbA,EAAUI,WAAWF,EAAOH,KC8BjBM,MAlCf,WACE,IAAMC,EAAiBT,GAAS,SAAAL,GAC9BD,EAAMC,KACL,KAEH,OACE,yBAAKe,UAAU,QACb,yBAAKA,UAAU,QACZjB,UAAQkB,KAAI,SAAAC,GAAK,OAChB,yBAAKF,UAAU,UACZE,EAAMD,KAAI,SAAAhB,GAAM,OACf,yBAAKe,UAAU,QACb,yBACEA,UAAU,OACVG,QAAS,SAAAC,GACPA,EAAEC,iBACFN,EAAed,IAEjBqB,cAAe,SAAAF,GACbA,EAAEC,iBACFN,EAAed,KAGhBA,cCjBJsB,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e006723c.chunk.js","sourcesContent":["const phrases = [\n  [\"Call\", \"Maya\", \"Murugan\", \"Kamal\", \"Bijay\", \"Subhash\", \"Samson\"],\n  [\"Pinky\", \"Sushila\", \"Sunder\", \"Tikaram\", \"Call Dubey\", \"Sunshine\", \"Duke\"],\n  [\"Wash Room\", \"Sleep\", \"Massage\", \"Stop\", \"Biscuit\", \"Dolly\", \"Billy\"],\n  [\"Bicycle\", \"Pain\", \"Shave\", \"Want Haircut\", \"Itching\", \"I don't agree\", \"I agree\"],\n  [\"Hey\", \"What's up\", \"How's it going\", \"Come here\", \"Tell me more\", \"Give it to me\", \"What's the news\"]\n]\n\nmodule.exports = {\n  phrases\n}\n","function speak(phrase) {\n  let msg = new SpeechSynthesisUtterance(phrase)\n  window.speechSynthesis.speak(msg)\n}\n\nexport default speak\n","const debounce = (func, wait) => {\n  let timeout\n\n  return function executedFunction(...args) {\n    const later = () => {\n      timeout = null\n      func(...args)\n    }\n\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n  }\n}\n\nexport default debounce\n","import React from \"react\"\nimport \"../styles/Home.css\"\nimport { phrases } from \"../api/builtins\"\nimport speak from \"../utils/speak\"\nimport debounce from \"../utils/debounce\"\n\nfunction Home() {\n  const debouncedSpeak = debounce(phrase => {\n    speak(phrase)\n  }, 900)\n\n  return (\n    <div className=\"Home\">\n      <div className=\"Main\">\n        {phrases.map(group => (\n          <div className=\"Column\">\n            {group.map(phrase => (\n              <div className=\"Cell\">\n                <div\n                  className=\"Card\"\n                  onClick={e => {\n                    e.preventDefault()\n                    debouncedSpeak(phrase)\n                  }}\n                  onContextMenu={e => {\n                    e.preventDefault()\n                    debouncedSpeak(phrase)\n                  }}\n                >\n                  {phrase}\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\nimport \"./App.css\"\nimport Home from \"./screens/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}